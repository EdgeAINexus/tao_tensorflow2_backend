podTemplate (cloud:'sc-ipp-blossom-prod', yaml : """
apiVersion: v1
kind: Pod
metadata:
    labels:
        some-label: tao-tf2-dev-build
spec:
    imagePullSecrets:
      - name: tltimagepullsecret
    containers:
    - name: docker
      image: docker:19.03.1-dind
      securityContext:
        privileged: true
      env:
        - name: DOCKER_TLS_CERTDIR
          value: ""
    - name: cuda
      image: gitlab-master.nvidia.com:5005/tlt/tao-tf2/tao_tf2_base_image@sha256:d0ed7ead05903fe3efd3c2efc0c635ee2d80952e4c912c203c9b5cf667d1d968
      securityContext:
        privileged: true
      command:
      - cat
      resources:
        requests:
          nvidia.com/gpu: 1
          memory: "16Gi"
        limits:
          nvidia.com/gpu: 1
          memory: "32Gi"
      tty: true
    restartPolicy: Never
    backoffLimit: 4
    nodeSelector:
      kubernetes.io/os: linux
      nvidia.com/driver_version: "510.41"
      nvidia.com/gpu_type: TITAN_V
    """
)
{
    node(POD_LABEL) {
        container('cuda') {
            stage("checkout"){
                gitlabCommitStatus(name: "checkout", connection: gitLabConnection('git-lab-master')) {
                    checkout scm
                    sh "ls -lrt"
                }
            }
            stage ('gpu_check') {
                gitlabCommitStatus(name: "gpu_check", connection: gitLabConnection('git-lab-master')) {
                    sh 'nvidia-smi'
                }
            }
            stage ('setup') {
                gitlabCommitStatus(name: "setup", connection: gitLabConnection('git-lab-master')) {
                    sh "source scripts/envsetup.sh"
                    def workspace_path = pwd()
                    def pythonpath_env = 'PYTHONPATH=' + workspace_path
                    def ci_path_env = 'CI_PROJECT_DIR=' + workspace_path
                    command_env = pythonpath_env + ' ' + ci_path_env
                }
            }
            stage ('setup_scratch_space') {
                sh 'apt-get update'
                sh 'apt-get install cifs-utils -y'
                sh 'env | sort'
                sh 'mkdir -p /home/scratch.metropolis2'
                sh 'ls -l /home/scratch.metropolis2'
                withCredentials([usernamePassword(credentialsId: 'svc-tlt-ci-mount', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]){
                    sh 'mount -t cifs -o "vers=2.0,username=${USERNAME},password=${PASSWORD},dom=nvidia.com,dir_mode=0444,file_mode=0444" //dc2-cdot49-sw-svm02/scratch.metropolis2 /home/scratch.metropolis2'
                }
                sh 'ls -l /home/scratch.metropolis2'
            }
            stage("functional_tests"){
                gitlabCommitStatus(name: "functional_tests", connection: gitLabConnection('git-lab-master')) {
                    println "started functional_tests .."
                    sh "${command_env} python ci/run_functional_tests.py"
                }
            }
            stage ('build_wheel') {
                gitlabCommitStatus(name: "build_wheel", connection: gitLabConnection('git-lab-master')) {
                    // Building the wheels for the tao source code.
                    def BUILD_TYPE="dev"
                    def TAO_WHEEL_VERSION="3.22.11"
                    def VER="${TAO_WHEEL_VERSION}.${BUILD_NUMBER}.${BUILD_TYPE}0"
                    def PYTHON_VER="cp38-cp38"
                    def ARCH="linux_x86_64"
                    sh "echo '${BUILD_NUMBER}-${BUILD_TYPE}' > build.info"
                    sh "pwd"
                    sh "${command_env} make build"
                    sh "${command_env} rm -rf *.egg-info"
                    sh "make install"
                    sh "efficientdet_tf2 --help"
                    sh "classification_tf2 --help"
                }
            }
            stage ('cleanup_scratch_space') {
                sh 'umount /home/scratch.metropolis2'
                sh 'ls -l /home/scratch.metropolis2'
            }
        }
        container("docker"){
            stage ('build_publish_docker') {
                gitlabCommitStatus(name: "build_publish_docker", connection: gitLabConnection('git-lab-master')) {
                    withEnv(["TAO_VERSION=4.22.11", "IMAGE_NAME=nvcr.io/nvstaging/tao/tao-toolkit-tf2", "TF_VERSION=2.9.1", "CUDA_VERSION=11.8"]){
                        docker.withRegistry('https://gitlab-master.nvidia.com:5005', 'jenkins-TLT-pkg'){
                            sh "docker build -t ${IMAGE_NAME}:v${TAO_VERSION}-tf${TF_VERSION}-${BUILD_NUMBER}-dev-cuda${CUDA_VERSION} --network=host -f ${WORKSPACE}/release/docker/Dockerfile.release ${WORKSPACE}"
                        }
                        docker.withRegistry('https://nvcr.io', 'NGC_API_KEY'){
                            sh "docker push ${IMAGE_NAME}:v${TAO_VERSION}-tf${TF_VERSION}-${BUILD_NUMBER}-dev-cuda${CUDA_VERSION}"
                        }
                    }
                }
            }
            stage ('wheeltamer_tests') {
              gitlabCommitStatus(name: "wheeltamer_tests", connection: gitLabConnection('git-lab-master')) {
                docker.withRegistry('https://gitlab-master.nvidia.com:5005', 'jenkins-TLT-pkg') {
                  // Pull wheeltamer container and run wheeltamer test
                  sh "docker pull gitlab-master.nvidia.com:5005/dl/pypi/wheel-ci-cd:wheeltamer@sha256:3073e85762a2e7d8e4c4166863cfd24b25e1086026cae3ca19affc4212cb3c20"
                  sh "docker run --rm -v ${WORKSPACE}/dist:/workspace \
                      -e 'EXPECTED_PKG_LICENSE=NVIDIA Proprietary Software' \
                      -e 'ALLOWED_NOSEC_COUNT=0' \
                      gitlab-master.nvidia.com:5005/dl/pypi/wheel-ci-cd:wheeltamer /bin/bash -c 'wheeltamer'"
                }
              }
            }
        }
        container('cuda') {
            stage ('wheel_publish') {
                gitlabCommitStatus(name: "wheel_publish", connection: gitLabConnection('git-lab-master')) {
                    // install jfrog first
                    sh "bash ${WORKSPACE}/docker/install_jfrog.sh"
                    def TAO_WHEEL_VERSION="3.22.11"
                    def BUILD_TYPE="dev"
                    def VER="${TAO_WHEEL_VERSION}.${BUILD_NUMBER}.${BUILD_TYPE}0"
                    def PYTHON_VER="cp38-cp38"
                    def ARCH="linux_x86_64"
                    def SRC="${WORKSPACE}/dist/nvidia_tao_tf2-${VER}-${PYTHON_VER}-${ARCH}.whl"
                    def TARGET="sw-tao-pypi-local/nvidia-tao-tf2/${VER}/"
                    def PROP="component_name=nvidia_tao_tf2;arch=x86_64;os=linux;build_source=None;version=${VER};branch=main;release_approver=vpraveen"
                    withCredentials([usernamePassword(credentialsId: 'tao-artifactory-tkn', passwordVariable: 'JFROG_PASSWORD', usernameVariable: 'JFROG_USERNAME')]) {
                        sh "jfrog rt u --url=https://urm.nvidia.com/artifactory/ --user=${JFROG_USERNAME} --apikey=${JFROG_PASSWORD} --target-props '${PROP}' ${SRC} ${TARGET}"
                    }
                }
            }
        }
    }
}
